/*
  Sometimes we want the footer of our website to stick to the bottom of the viewport regardless of the length of the content on the page.

  If the page is short and the screen is not filled, the footer lives high on the viewport, just below the other content, and not at the bottom of the page as we wish.

  Before Flex and Grid came to town, this was the preferred hack for keeping the footer on the bottom of the page. I show this here for historical reasons and for making apparent, once more, how flexbox and grid changed web development, transforming it from a chore to an art
*/
:root {
  --colorMain: rgb(24, 24, 24);
  --colorBg: rgb(236, 233, 233);
}

*,
*:before,
*:after {
    box-sizing: inherit;
}

* {
    margin: 0;
    padding: 0;
}

/**
 * Layout
 */

html {
 box-sizing: border-box;
 font-size: 62.5%;
 scroll-behavior: smooth;
}


@media screen and (prefers-reduced-motion: reduce) {
	html {
		scroll-behavior: auto;
	}
}

body {
 margin: 0;
 padding: 0;
 color: var(--colorMain);
 background-color:var(--colorBg);
 font-family: Geneva, Verdana, sans-serif;
 font-size: 2rem;
 text-shadow: 0, 2px, 0 rgba(0,0,0, .07);
 -webkit-overflow-scrolling: touch;
 overflow-y: scroll;
}

section {
  scroll-margin-top: .75em;
}

h1,
h2,
h3,
h4,
h5,
h6 {
 font-weight: bold;
 text-align: center;
 margin: 10px 0;
}

p {
 line-height: 1.45;
 margin-bottom: 3.5rem;
 text-align: center;
 font-weight: 300;
 font-size: 1.8rem;
}

p:last-of-type {
  margin-bottom: 0;
}

small {
font-size: 1.5rem;
}

a {
 text-decoration: none;
 margin: 0;
 font-weight: 300;
 color: rgb(58, 84, 169);
}

a:hover,
a:focus {
 color: rgb(20, 34, 80);;
}


.container {
    width: 50%;
    margin: 0 auto;
    position: relative;
    min-height: 100vh;
}
footer {
    position: absolute;
    bottom: 0px;
    width: 100%;
    height: 2.5rem;
    color: rgb(186, 33, 33);
}

main {
    padding-bottom: 2.5rem;
}